# 18. Performance and optimization (Производительность и оптимизация).


# Методы и инструменты для повышения эффективности и скорости работы 
# проекта на Django с использованием меньшего количества ресурсов.

"""
Собственное время - более ценный ресурс, чем ресурс процессора.
"""


"""
1. Инструменты для анализа
1.1. django-debug-toolbar - инструмент Django. Дает представление о том, 
что делает код и сколько времени на это тратит. Показывает все SQL-запросы, 
которые генерирует страница и сколько времени занял каждый из них. 
Также доступны сторонние панели, которые могут сообщать о производительности кеша, 
времени отрисовки шаблона и так далее. 
1.2. Yahoos Yslow, Google PageSpeed - сторонние бесплатные сервисы, которые анализируют сайт 
с точки зрения удаленного HTTP-клиента, имитируя работу реального пользователя.


2. Делать все правильно с самого начала
Пример вычисления количества обьектов по скорости вычисления:
1. my_bicycles.count()
2. len(my_bicycles)
3. {{ my_bicycles|length }}


3. Кэширование
Хранение данных в быстро доступном кэше может принести огромную пользу.
Можно кешировать весь сайт, страницы или отдельные данные.
@cached_property сохраняет значение, возвращаемое свойством.


4. Понимание лени
Лень - стратегия, дополняющая кэширование. Кэширование позволяет избежать повторных 
вычислений за счет сохранения результатов; Лень откладывает вычисления до тех пор, пока они
не потребуются. Лень позволяет ссылаться на вещи до того, как они будут созданы.


5. Базы данных
Оптимизация БД, ее таблиц. Влючение постоянных подключений может ускорить подключения 
к учетным записям БД в течение значительной части времени обработки запроса.


6. Производительность HTTP
6.1. Middleware
6.1.1. ConditionalGetMiddleware
Добавляет поддержку современных браузеров для условного ПОЛУЧЕНИЯ ответов на основе заголовков
ETag и Last-Modified. Также вычисляет и устанавливает ETag если необходимо.
6.1.2. GZipMiddleware
Сжимает ответы для современных браузеров, экономя полосу пропускания и время передачи.
НО, считается угрозой безопасности и уязвим для атак, которые сводят на нет защиту TLS/SSL.
6.2. Сессии
Использование кэшированных сеансов может быть способом повышения производительности
за счет устранения необходимости загружать данные сеанса из БД и хранить их в памяти.
6.3. Статические файлы
6.3.1. ManifestStaticFilesStorage
Добавляет тег к именам статических файлов, чтобы браузеры могли безопасно кэшировать их
в течение длительного времени, не пропуская будущие изменения - при изменении файла изменится
и тег, поэтому браузеры автоматически перезагрузят ресурс.
6.4. Производительность шаблона
{% block %} быстрее чем {% include %}. Большое кол-во мелких частей в шаблоне 
снижает производительность. cached template loader повышает производительность, поскольку
позволяет избежать компиляции каждого шаблона каждый раз. Jinja2 - более быстрый шаблон.
6.5. Использование разных версий ПО
6.6. PyPy
6.7. Реализация на языке Си
"""