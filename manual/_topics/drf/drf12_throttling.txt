12. Throttling (Регулирование | Дросселирование)


Тротлинг - определяет, должен ли запрос быть авторизован. Обозначает временное 
состояние и используется для контроля скорости запросов, которые клиенты могут 
делать к API. Не следует рассматривать как меру безопасности от DoS, поскольку 
существует DDoS.

Периоды: second, minute, hour, day.

Как определяются клиенты
Заголовок X-Forwarded-For и WSGI-переменная REMOTE_ADDR используются для уникальной 
идентификации IP-адресов клиентов. Если есть X-Forwarded-For то будет 
использоваться он, иначе REMOTE_ADDR.


AnonRateThrottle
    Ограничивает скорость запросов неаутентифицированных пользователей. IP 
    используется для генерации уникального ключа для тротлинга. Скорость 
    запроса определяется по одному из параметров: св-во rate; 
    DEFAULT_THROTTLE_RATES['anon].
UserRateThrottle
    Ограничивает скорость для каждого пользователя. ID используется для 
    генерации уникального ключа для тротлинга. Неаутентифицированные запросы 
    будут возвращаться к использованию IP. Скорость запроса определяется по 
    одному из параметров: св-во rate; DEFAULT_THROTTLE_RATES['anon].
ScopedRateThrottle
    Ограничивает запросы пользователей. Применяется, если представление имеет 
    св-во throttle_scope. Уникальный ключ тротлинга формируется путем 
    соединения 'scope' запроса с ID или IP. Скорость запроса определяется по 
    DEFAULT_THROTTLE_RATES по ключу 'scope' запроса.


Чтобы создать пользовательский тротлинг, переопределите BaseThrottle и 
реализуйте allow_request(self, request, view). Метод должен возвращать True, 
если запрос должен быть разрешен, и False в противном случае. По желанию вы 
также можете переопределить метод .wait(). Если он реализован, .wait() должен 
возвращать рекомендуемое количество секунд ожидания перед попыткой следующего 
запроса или None. Метод .wait() будет вызван только в том случае, если 
allow_request() ранее вернул False. Если реализован метод .wait() и запрос 
дросселируется, то в ответ будет включен заголовок Retry-After.