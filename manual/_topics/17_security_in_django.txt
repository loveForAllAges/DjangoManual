17. Security in Django (Безопасность Django).


1. Защита от межсайтового скриптинга (XSS). (TODO Как защититься)
    XSS-атаки позволяют внедрять клиенские сценарии в браузеры других 
    пользователей. Обычно это достигается путем хранения вредоносных сценариев 
    в БД или путем предложения пользователям щелкнуть ссылку, которая приведет 
    к выполнению JS злоумышленника браузером пользователя. Использование 
    шаблонов Django защищает от XSS-атак. 
2. Защита от подделки межсайтовых запросов (CSRF). (TODO Как работает)
    CSRF-атаки позволяют злоумышленнику выполнять действия, используя учетные 
    данные другого пользователя, без ведома или согласия этого пользователя.
    Защита от CSRF-атак работает путем проверки секрета в каждом запросе POST.
    Это гарантирует, что злоумышленник не сможет воспроизвести форму POST на 
    сайте и заставить другого вошедшего в систему пользователя невольно 
    отправить эту форму. При развертывании с помощью HTTPS, CsrfMiddleware 
    проверяет, что заголовок HTTP-реферера имеет URL-адрес того же источника.
3. Защита от SQL-иньекций. (TODO Попробовать взломать)
    SQL-иньекций - атака, при которой злоумышленник может выполнить 
    произвольный код SQL в БД. Это может привести к удалению записей или утечке 
    данных. Django Queryset защищены от этой атаки. 
4. Защита от кликджекинга. (TODO Как работает)
    Кликджекинг - атака, при которой вредоносный сайт помещает другой сайт во 
    фрейм. Эта атака может привести к тому, что ничего не подозревающий 
    пользователь будет вынужден выполнить непреднамеренные действия на целевом 
    сайте. Django содержит защиту от атаки в виде X-Frame-Options middleware.
5. SSL/HTTPS.
    Сайт всегда лучше разворачивать по протоколу HTTPS. Иначе злоумышленники 
    могут перехватить данные аутентификации или любую другую информацию, 
    передаваемую между клиентом и сервером, а в некоторых случаях - активные 
    сетевые злоумышленники - изменить отправляемые данные. Доп. шаги:
    - Установить SECURE_PROXY_SSL_HEADER, иначе может привести к уязвимостям 
    CSRF.
    - Установить SECURE_SSL_REDIRECT=True, чтобы HTTP редирект HTTPS.
    - Использовать безопасные файлы cookie (SESSION_COOKIE_SECURE=True и 
    CSRF_COOKIE_SECURE=True). Это указывает браузеру отправлять cookie только 
    через HTTPS.
    - Использовать строгую транспортную безопаснсть HSTS. HSTS - заголовок 
    HTTP, который сообщает браузеру, что все будущие подключения к сайту всегда 
    должны использовать HTTPS. Настроить с помощью SECURE_HSTS_SECONDS, 
    SECURE_HSTS_INCLUDE_SUBDOMAINS, SECURE_HSTS_PRELOAD или на веб-сервере.
6. Проверка заголовка хоста. (TODO Затестить)
    Host заголовок используется для создания URL-адресов. Хотя эти значения 
    очищаются для предотвращения атак с использованием межсайтинговых 
    сценариев, поддельное значение может использоваться для подделки 
    межсайтовых запросов, атак по отправлению кэша и отправлению ссылок в 
    эписьмах. Поскольку даже кажущиеся безопасными конфигурации веб-сервера 
    подвержены поддельным заголовкам Host, Django проверяет эти заголовки на 
    соответствие ALLOWED_HOST. Эта проверка применяется через 
    django.http.HttpRequest.get_host() и если в проекте есть обращение к 
    заголовку Host из request.META, то защита бесполезна. Также необходимо 
    включить USE_X_FORWARDED_HOST (поддержка заголовка X-Forwarded-Host).
7. Политика рефералов. (TODO Затестить)
    Браузеры используют Referer заголовок как способ отправить на сайт 
    информацию о том, как на него попали пользователи. Установив политику 
    рефералов, вы можете помочь защитить конфиденциальность своих пользователей, 
    ограничивая обстоятельства, при которых Referer заголовок устанавливается.
8. Политика открытия перекрестного происхождения. (TODO Затестить)
    Заголовок политики открытия перекрестного происхождения (COOP) позволяет
    браузерам изолировать окно верхнего уровня от других документов, помещая их 
    в другую контекстную группу, чтобы они не могли напрямую взаимодействовать 
    с окном верхнего уровня. Если документ, защищенный COOP, открывает 
    всплывающее окно из разных источников, св-во всплывающего окна 
    window.opener будет иметь значение null. COOP защищает от атак из разных 
    источников.
9. Безопасность сеанса. (TODO Затестить)
    Подобно ограничениям CSRF, требующим развертывания сайта таким образом, 
    чтобы недоверенные пользователи не имели доступа к каким-либо поддоменам, 
    django.contrib.sessions также имеет ограничения.
10. Контент, загружаемый пользователем. (TODO)
    - Если сайт поддерживает загрузку файлов, необходимо ограничить эту загрузку 
    в конфигурации веб-сервера до разумного размера, чтобы предотвратить Dos и 
    DDoS атаки.
    - Если используются свои собственные статические файлы, необходимо 
    отключить обработчики, которые будут выполнять статические файлы как код. 
    Иначе пользователи смогут выполнять произвольный код, загружая и запрашивая 
    специально созданный файл.
    - Обработка загрузки мультимедиа создает некоторые уязвимости, когда эти 
    мультимедиа обслуживаются небезопасными способами. Например, файл HTML 
    можно загрузить как изображение, если этот файл содержит заголовок PNG, за 
    которым следует вредоносный HTML. Этот файл пройдет проверку библиотеки 
    Pillow. Шаги для смягчения атак:
    - Обслуживание загружаемого контента из отдельного домена верхнего или 
    второго уровня. Это предотвращает любые эксплойты, блокируемые политиками 
    защиты одного и того же происхождения, такими как межсайтовый скриптинг.
    Например, если сайт на example.com, то обслуживание загружаемого контента 
    (MEDIA_URL) например user-content-example.com. Недостаточно обслуживать 
    контент из субдомена (user-content.example.com).
    - Определить список допустимых расширений файлов для загружаемых 
    пользователем файлов и настроить веб-сервер для обслуживания только них.
11. Дополнительные темы безопасности. (TODO ВАЖНО)
    - Код Python находится за пределами корня веб-сервера. Это гарантирует, что 
    код не будет случайно использован в виде обычного текста.
    - Повышенная осторожность с любыми загружаемыми файлами.
    - Ограничение запросов на аутентификацию пользователей.
    - Сохранение в тайне SECRET_KEY и SECRET_KEY_FALLBACKS.
    - Ограничение доступа к системе кэширования и БД с помощью брандмауэра.
    - Защита от уязвимостей Open Web Application Security Project (OWASP).
