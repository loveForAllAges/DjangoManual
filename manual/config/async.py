from django.views import View
from django.http import HttpResponse

import asyncio


"""
Раздел: Asynchronous (Асинхронность)


Любое представление можно обьявить асинхронным.

Асинхронные запросы:
async for author in Author.objects.filter(name='A'):
    book = await author.books.afirst()
Поддерживаются все запросы.

#TODO как работает ASGI, WSGI. Как они связаны с асинхронностью.


Функции асинхронного адаптера


1. sync_to_acync(sync_function, thread_sensitive=True)
Принимает синхронную функцию и возвращает асинхронную фукнцию, которая ее оборачивает.
Может использоваться как декоратор или прямая оболочка.

thread_sensitive - функция синхронизации будет выполняться в том же потоке что и все остальные.
Это основной поток синхронный.

2. async_to_sync(async_function, force_new_loop=False)
Принимает асинхронную функцию и возвращает фукнцию синхронизации, которая ее оборачивает.
Может использоваться как декоратор или прямая оболочка.

Функция запускается в цикле событий для текущего потока, если он присутствует.
Если текущего цикла событий нет, новый цикл событий запускается специально для одного асинхронного вызова
и снова закрывается после завершения. В любом случае асинхронная фукнция будет выполняться в другом потоке.
"""


class AsyncView(View):
    async def get(self, request, *args, **kwargs):
        await asyncio.sleep(10)
        return HttpResponse('Hello async world!')
