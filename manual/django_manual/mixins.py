from django.views import generic


"""
1. ContextMixin
2. TemplateResponseMixin
3. SingleObjectMixin
4. SignleObjectTemplateResponseMixin
5. MultipleObjectMixin
6. MultipleObjectTemplateResponseMixin
7. FormMixin
8. ModelFormMixin
9. ProcessFormView
10. DeletionMixin
11. YearMixin
12. MonthMixin
13. DayMixin
14. WeekMixin
15. DateMixin
16. BaseDateListMixin
"""


"""
1. ContextMixin


Атрибуты:
    - extra_context - словарь для включения в контекст. Это удобный способ указать некоторый контекст в as_view().
Методы:
    - get_context_data(**kwargs) - возвращает словарь, представляющий контекст шаблона.
"""

"""
2. TemplateResponseMixin


Предоставляет механизм для создания обьекта TemplateResponse, учитывая подходящий контекст.
Используемый шаблон настраивается и может быть дополнительно настроен с помощью подклассов.

Атрибуты:
    - template_name - полное имя шаблона, определенное в строке.
    - template_engine - механизм шаблонов, используемый для загрузки шаблона.
    - response_class - класс ответа, по умолчанию TemplateResponse.
    - content_type - тип контента, который будет использоваться для ответа. По умолчанию None ('text/html').
Методы:
    - render_to_response(context, **response_kwargs) - возвращает self.response_class. Вызывает get_template_names().
    - get_template_names() - возвращает список имен шаблонов для поиска при отрисовке шаблона. Будет использоваться первый найденный шаблон.
"""

"""
3. SingleObjectMixin


Предоставляет механизм поиска обьекта, связанного с текущим HTTP-запросом.

Методы и атрибуты:
    - model - модель, для которой будут отображаться данные.
    - queryset - QuerySet представляющий обьекты. Если указан, то заменяет model.
    - slug_field - имя поля модели.
    - slug_url_kwarg - имя аргумента ключевого слова URLConf. По умолчанию 'slug'.
    - pk_url_kwarg - имя аргумента ключевого слова URLConf, содержашего первичный ключ. По умолчанию 'pk'.
    - context_object_name - Обозначает имя переменной, которая будет в контексте.
    - query_pk_and_slug - Если True, то get_object() выполнит поиск включая pk и slug. По умолчанию False.
    - get_object(queryset=None) - возвращает обьект, который будет отображаться в представлении.
    - get_queryset() - возвращает набор запросов, который будет использоваться для получения обьекта для представления.
    - get_context_object_name(obj) - возвращает имя контекстной переменной, которая будет использоваться для хранения данных, которыми манипулирует представление.
    - get_context_data(**kwargs) - возвращает контекстные данные для отображения обьекта.
    - get_slug_field() - возвращает имя поля slug, которое будет использоваться для поиска по slug. По умолчанию slug_field.
"""

"""
4. SingleObjectTemplateResponseMixin

Расширяет TemplateResponseMixin. Класс-миксин, который выполняет рендеринг ответов на основе шаблонов для представлений, которые работают с одним экземпляром класса.


Методы и атрибуты:
    - template_name_field - поле текущего экземпляра обьекта, которое можно использовать для определения имени шаблона.
    - template_name_suffix - суффикс, добавляемый к автоматически создаваемому имени шаблона-кандидата. По умолчанию '_default'.
    - get_template_names() - возвращает список имен шаблонов.
"""

"""
5. MultipleObjectMixin


Наследует ContextMixin.

Миксин, который можно использовать для отображения списка обьектов.
Если paginate_by указано, то результаты будут разбиты на страницы. Указать номер страницы:
1. path('objects/page<int:page>', PaginatedView.as_view()),
2. /objects?page=3

Методы и атрибуты:
    - allow_empty - отображать ли страницу с пустым списком обьектов. Если нет, то выдаст ошибку 404.
    - model - модель, для которой будут отображаться данные.
    - queryset - QuerySet обьектов. Заменяет model.
    - ordering - строка или список строк, определяющих порядок к queryset.
    - paginate_by - целое число, указывающее кол-во обьектов на странице.
    - paginate_orphans - целое число, указывающее кол-во обьектов переполнения, которые может содержать последняя страница.
    - page_kwarg - строка, которая определяет имя для параметра страницы. По умолчанию page.
    - paginator_class - класс paginator, который будет использоваться для нумерации страниц. По умолчанию Paginator.
    - context_object_name - имя переменной в контексте.
    - get_queryset() - возвращает список элементов.
    - get_ordering() - возвращает строку, определяющую порядок для queryset.
    - paginate_queryset(queryset, page_size) - возвращает кортеж из четырех элементов (paginator, page, object_list, is_paginated).
    - get_paginate_by(queryset) - возвращает кол-во элементов для разбивки на страницы. По умолчанию paginate_by.
    - get_paginator(queryset, per_page, orphans=0, allow_empty_first_page=True) - возвращает экземпляр разбиения на страницы. По умолчанию paginator_class.
    - get_paginate_orphans() - целое число, указывающее кол-во обьектов переполнения. По умолчанию paginate_orphans.
    - get_allow_empty() - возвращает логическое значение. По умолчанию allow_empty.
    - get_context_object_name() - возвращает имя контекстной переменной, которая будет хранить список данных. По умолчанию context_object_name.
    - get_context_data() - возвращает контекстные данные для отображения списка обьектов.
Контекст:
    - object_list - список обьектов.
    - is_paginated - разбиты ли результаты на страницы.
    - paginator - экземпляр Paginator.
    - page_obj - экземпляр Page.
"""

"""
6. MultipleObjectTemplateResponseMixin


Наследует TemplateResponseMixin.

Миксин, выполняющий рендеринг ответов на основе шаблонов для представлений, которые работают со списком экземпляров обьектов.

Методы и атрибуты:
    - template_name_suffix - суффикс, добавляемый к имена шаблона. По умолчанию '_list'.
    - get_template_names() - возвращает список имен шаблонов.
"""

"""
7. FormMixin


Наследует ContextMixin.

Миксин, предоставляющий возможности для создания и отображения форм.

Методы и атрибуты:
    - initial - словарь исходных данных для формы.
    - form_class - класс формы для создания экземпляра.
    - success_url - URL-адрес для перенарпавления после успешной обработки формы.
    - prefix - префикс для формы.
    - get_initial() - возвращает исходные данные для формы. По умолчанию initial.
    - get_form_class() - возвращает класс формы для создания экземпляра. По умолчанию form_class.
    - get_form(form_class=None) - Создает экземпляр form_class, если form_class не указано.
    - get_form_kwargs() - создание аргументов ключевого слова для создания экземпляра формы. (TODO)
    - get_prefix() - определяет prefix для созданной формы. По умолчанию prefix.
    - get_success_url() - возвращает URL-адрес для перенаправления при успешной проверке формы. По умолчанию success_url.
    - form_valid(form) - Перенаправляет на get_success_url().
    - form_invalid(form) - отображает ответ, предоставляя недопустимую форму в качестве контекста.
    - get_context_data(**kwargs) - вызывает get_form() и добавляет результат к данным контекста с именем form.
"""

"""
8. ModelFormMixin


Наследует FormMixin, SingleObjectMixin.

Миксин, который работает на ModelForms, а не на отдельной форме. Есть доступ к model и queryset, которыми ModelForm манипулирует.

Методы и атрибуты:
    - model - модель. Если не указано, то будет self.object или queryset.
    - fields - список названий полей. Так же как и Meta.fields в ModelForm.
    - success_url - URL-адрес для перенаправления после успешной обработки формы.
    - get_form_class() - возвращает класс формы. Если form_class указан, то будет использован. Иначе ModelForm будет автоматически создано под модель.
    - get_form_kwargs() - 
    - get_success_url() - URL-адрес для перенаправления при успешной проверке формы.
    - form_valid(form) - сохраняет экземпляр формы, устанавливает текущий обьект для представления и перенаправляет на get_success_url().
    - form_invalid(form) - отображает ответ, предоставляя недопустимую форму в качестве контекста.
 """

"""
9. ProcessFormMixin


Наследует View.

Миксин, обеспечивающий базовый рабочий процесс HTTP GET и POST.

Методы и атрибуты:
    - get(request, *args, **kwargs) - отображает ответ, используя контекст get_context_data().
    - post(request, *args, **kwargs) - создает форму, проверяет ее на допустимость и обрабатывает ее соответствующим образом.
    - put(request, *args, **kwargs) - действие PUT вызывает post().
"""

"""
10. DeletionMixin


Включает обработку HTTP DELETE.

Методы и атрибуты:
    - success_url - URL-адрес для перенаправления в случае успешного выполнения операции.
    - delete(request, *args, **kwargs) - извлекает целевой обьект и вызывает его delete() метод, а затем перенаправляет на успешный URL-адрес.
    - get_success_url() - возвращает URL-адрес для перенаправления после успешного удаления назначенного обьекта. По умолчанию success_url.
"""

"""
11. YearMixin


Миксин, который получает информацию для анализа компонента года даты.

Методы и атрибуты:
    - year_format - формат strftime() при анализе года. По умолчанию '%Y'.
    - year - значение года в виде строки. По умолчанию None.
    - get_year_format() - возвращает strftime() формат для анализа года. По умолчанию year_format.
    - get_year() - возвращает год в виде строки, за который это представление будет отображать данные.
    - get_next_year(date) - возвращает обьект даты, содержащий первый день года после указанной даты.
    - get_previous_year(date) - возвращает обьект даты, содержащий первый день года, предшествующий указанной дате.
"""

"""
12. MonthMixin


Миксин, который получает информацию для анализа компонента месяца даты.

Методы и атрибуты:
    - month_format - формат strftime() при анализе месяца. По умолчанию '%b'.
    - month - значение месяца в виде строки. По умолчанию None.
    - get_month_format() - возвращает strftime() формат для анализа месяца. По умолчанию month_format.
    - get_month() - возвращает месяц в виде строки, за который будут отображаться данные.
    - get_next_month(date) - возвращает обьект даты, содержащий первый день месяца после указанной даты.
    - get_previous_month(date) - возвращает обьект даты, содержащй первый день месяца, предшествующего указанной дате.
"""

"""
13. DayMixin


Миксин, который получает информацию для анализа компонента дня даты.

Методы и атрибуты:
    - day_format - формат strftime() для анализа дня. По умолчанию '%d'.
    - day - значение дня в виде строки. По умолчанию None.
    - get_day_format() - возвращает strftime() формат для анализа дня. По умолчанию day_format.
    - get_day() - возвращает день в виде строки, за который будет отображать данные.
    - get_next_day(date) - возвращает обьект даты, содержащий следующий действительный день после указанной даты.
    - get_previous_day(date) - возвращает обьект даты, содержащий предыдущий действительный день.
"""

"""
14. WeekMixin


Миксин, который можно использовать для получения информации для анализа недельного компонента даты.

Методы и атрибуты:
    - week_format - формат strftime() для анализа недели. По умолчанию '%U'.
    - week - значение недели в виде строки. По умолчанию None.
    - get_week_format() - возвращает strftime() формат для анализа недели. По умолчанию week_format.
    - get_week() - возвращает неделю в виде строки, за которую будет отображать данные.
    - get_next_week(date) - возвращает обьект даты, содержащий первый день недели после указанной даты.
    - get_previous_week(date) - возвращает обьект даты, содержащий первый день недели перед указанной датой.
"""

"""
15. DateMixin


Миксин, обеспечивающий общее поведение для всех представлений на основе даты.

Методы и атрибуты:
    - date_field - имя модели DateField или DateTimeField в QuerySet модели, которую архив на основе даты должен использовать для определения списка обьектов.
    - allow_future - включать ли будущие обьекты на эту страницу.
    - get_date_field() - возвращает имя поля, содержащего данные даты для работы. По умолчанию date_field.
    - get_allow_future() - включать ли будущие обьекты на эту страницу. По умолчанию allow_future.
"""

"""
16. BaseDateListView


Наследует DateMixin, MultipleObjectMixin.

Базовый класс, обеспечивающий общее поведение для всех представлений на основе даты. Обычно используется не он, а один из его подклассов.
Содержит self.object_list и self.date_list.

Методы и атрибуты:
    - allow_empty - отображать ли страницу, если не доступных обьектов. Если нет, то будет ошибка 404. По умолчанию False.
    - date_list_period - строка, определяющая период агрегирования для date_list. Это должен быть один из 'year' (по умолчанию), 'month' или 'day'.
    - get_dated_items() - возвращает кортеж из трех элемнтов (date_list, object_list, extra_context).
    - get_dated_queryset(**lookup) - возвращает набор запросов, отфильтрованный с использованием аргументов запроса.
    - get_date_list_period() - возвращает период агрегирования для date_list. По умолчанию date_list_period.
    - get_date_list(queryset, date_type=None, ordering='ASC') - возвращает список дат date_type для которого содержатся записи queryset.
"""